// Code generated by sqlc. DO NOT EDIT.
// source: scrape.sql

package db

import (
	"context"
	"time"
)

const countOwnScrape = `-- name: CountOwnScrape :one
SELECT COUNT(*) FROM scrape
WHERE user_id = $1
`

func (q *Queries) CountOwnScrape(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOwnScrape, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countScrape = `-- name: CountScrape :one
SELECT COUNT(*) FROM scrape
`

func (q *Queries) CountScrape(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countScrape)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createScrape = `-- name: CreateScrape :one
INSERT INTO scrape (
  user_id, url,scrapped
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, url, scrapped, created_at
`

type CreateScrapeParams struct {
	UserID   int32  `json:"userID"`
	Url      string `json:"url"`
	Scrapped string `json:"scrapped"`
}

func (q *Queries) CreateScrape(ctx context.Context, arg CreateScrapeParams) (Scrape, error) {
	row := q.db.QueryRowContext(ctx, createScrape, arg.UserID, arg.Url, arg.Scrapped)
	var i Scrape
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Scrapped,
		&i.CreatedAt,
	)
	return i, err
}

const filter = `-- name: Filter :many
SELECT id, user_id, url, scrapped, created_at FROM scrape WHERE created_at  BETWEEN $1 AND $2
`

type FilterParams struct {
	CreatedAt   time.Time `json:"createdAt"`
	CreatedAt_2 time.Time `json:"createdAt2"`
}

func (q *Queries) Filter(ctx context.Context, arg FilterParams) ([]Scrape, error) {
	rows, err := q.db.QueryContext(ctx, filter, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Scrape{}
	for rows.Next() {
		var i Scrape
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Scrapped,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnScrape = `-- name: GetOwnScrape :many
SELECT id, user_id, url, scrapped, created_at FROM scrape
WHERE user_id = $1 AND id <= $2 LIMIT 5
`

type GetOwnScrapeParams struct {
	UserID int32 `json:"userID"`
	ID     int32 `json:"id"`
}

func (q *Queries) GetOwnScrape(ctx context.Context, arg GetOwnScrapeParams) ([]Scrape, error) {
	rows, err := q.db.QueryContext(ctx, getOwnScrape, arg.UserID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Scrape{}
	for rows.Next() {
		var i Scrape
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Scrapped,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScrape = `-- name: GetScrape :many
SELECT id, user_id, url, scrapped, created_at FROM scrape
WHERE  id <= $1 LIMIT 5
`

func (q *Queries) GetScrape(ctx context.Context, id int32) ([]Scrape, error) {
	rows, err := q.db.QueryContext(ctx, getScrape, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Scrape{}
	for rows.Next() {
		var i Scrape
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Scrapped,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const search = `-- name: Search :many
SELECT id, user_id, url, scrapped, created_at FROM scrape WHERE url @@ $1
`

func (q *Queries) Search(ctx context.Context, url string) ([]Scrape, error) {
	rows, err := q.db.QueryContext(ctx, search, url)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Scrape{}
	for rows.Next() {
		var i Scrape
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Scrapped,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
